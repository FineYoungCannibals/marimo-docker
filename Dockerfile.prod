# ---- Stage 1: Build layer with uv ----
FROM ghcr.io/astral-sh/uv:0.4.20 AS uv

# ---- Stage 2: Application image ----
FROM python:3.13.1-slim

# Copy in `uv` binary
COPY --from=uv /uv /bin/uv

# Environment
ENV VIRTUAL_ENV=/home/app_user/venv
ENV PATH="$VIRTUAL_ENV/bin:$PATH"
ENV PYTHONUNBUFFERED=1

# System deps
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    iputils-ping \
 && rm -rf /var/lib/apt/lists/*

# Create user
RUN useradd -m app_user

# Create virtualenv and install deps
RUN uv venv "$VIRTUAL_ENV"

# Copy requirements first for caching
COPY requirements.txt /tmp/requirements.txt

RUN uv pip install --no-cache-dir -U -r /tmp/requirements.txt && \
    rm /tmp/requirements.txt

# Create working directories and set permissions
USER app_user
WORKDIR /home/app_user/notebooks

RUN mkdir -p /home/app_user/notebooks/utils && \
    touch /home/app_user/.marimo_toml

# Copy app code and entrypoint
COPY --chown=app_user:app_user utils /home/app_user/notebooks/utils
COPY --chown=app_user:app_user entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

RUN chown -R app_user:app_user /home/app_user

# Expose port and set entrypoint
EXPOSE 2718
ENTRYPOINT ["/entrypoint.sh"]
